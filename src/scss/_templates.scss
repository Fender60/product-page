@use "sass:math";
@use "sass:list";
@use "sass:meta";

$base-font-size: 16px;

@function px-to-rem($values...) {
	$result: ();
	@each $value in $values {
		$converted-value: if(meta.type-of($value) == "number", math.div($value, $base-font-size) * 1rem, $value);
		$result: list.append($result, $converted-value);
	}
	@return $result;
}

//Breakpoints
$sm: 576px;
$md: 676px;
$lg: 902px;


// @mixin adaptiv($property, $pcSize, $mobSize, $startSize, $endSize) {
// 	$addSize: $pcSize - $mobSize;
// 	#{$property}: calc(#{$mobSize + px} + #{$addSize} * ((100vw - #{$endSize + px}) / (#{$startSize} - #{$endSize})));
// }

@mixin adaptiv($property, $pcSize, $mobSize, $startSize, $endSize, $base-font-size: 16px) {
	// Конвертируем значения из px в rem
	$pcSize-rem: math.div($pcSize, $base-font-size);
	$mobSize-rem: math.div($mobSize, $base-font-size);
	$startSize-rem: math.div($startSize, $base-font-size);
	$endSize-rem: math.div($endSize, $base-font-size);
 
	$addSize: $pcSize-rem - $mobSize-rem;
 
	#{$property}: calc(
	  #{$mobSize-rem + rem} + #{$addSize} *
	  ((100vw - #{$endSize-rem + rem}) / (#{$startSize-rem} - #{$endSize-rem}))
	);
 } 